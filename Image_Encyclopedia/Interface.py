#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.24.1
#  in conjunction with Tcl version 8.6
#    Jul 31, 2019 10:36:55 AM CEST  platform: Windows NT

import sys
import traceback
from tkinter import filedialog
from tkinter import messagebox as mbox
from PIL import ImageTk,Image
from Classifier import summary
from Data_Manager import deduction,foundname,synset,autocomplete

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1101x729+381+190")
        top.title("Image Encyclopedia")
        top.configure(background="#d9d9d9")
    
        menubar = tk.Menu(root)
        filemenu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="File", menu=filemenu)
        filemenu.add_command(label="Exit", command=root.quit)
        root.config(menu=menubar)     
                     
        self.Labelframe1 = tk.LabelFrame(top)
        self.Labelframe1.place(relx=0.027, rely=0.069, relheight=0.802
                , relwidth=0.472)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(foreground="black")
        self.Labelframe1.configure(text='''Classification and loading''')
        self.Labelframe1.configure(background="#d9d9d9")
        self.Labelframe1.configure(width=520)

        self.Canvas1 = tk.Canvas(self.Labelframe1)
        self.Canvas1.place(relx=0.058, rely=0.085, relheight=0.774
                , relwidth=0.871, bordermode='ignore')
        self.Canvas1.configure(background="#ffffff")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="#c4c4c4")
        self.Canvas1.configure(selectforeground="black")
        self.Canvas1.configure(width=453)

        self.Button1 = tk.Button(self.Labelframe1)
        self.Button1.place(relx=0.058, rely=0.889, height=34, width=457
                , bordermode='ignore')
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Add images and classify''')
        self.Button1.configure(width=457)
        self.Button1.configure(command=self.button1_clicked)

        self.Labelframe2 = tk.LabelFrame(top)
        self.Labelframe2.place(relx=0.536, rely=0.069, relheight=0.802
                , relwidth=0.427)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(foreground="black")
        self.Labelframe2.configure(text='''Search''')
        self.Labelframe2.configure(background="#d9d9d9")
        self.Labelframe2.configure(width=470)

        self.Scrolledtext2 = ScrolledText(self.Labelframe2)
        self.Scrolledtext2.place(relx=0.064, rely=0.068, relheight=0.463
                , relwidth=0.896, bordermode='ignore')
        self.Scrolledtext2.configure(background="white")
        self.Scrolledtext2.configure(font="TkTextFont")
        self.Scrolledtext2.configure(foreground="black")
        self.Scrolledtext2.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext2.configure(highlightcolor="black")
        self.Scrolledtext2.configure(insertbackground="black")
        self.Scrolledtext2.configure(insertborderwidth="3")
        self.Scrolledtext2.configure(selectbackground="#c4c4c4")
        self.Scrolledtext2.configure(selectforeground="black")
        self.Scrolledtext2.configure(width=10)
        self.Scrolledtext2.configure(wrap="none")

        self.Entry1 = tk.Entry(self.Labelframe2)
        self.Entry1.place(relx=0.064, rely=0.564, height=30, relwidth=0.647
                , bordermode='ignore')
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(width=304)

        self.Button2 = tk.Button(self.Labelframe2)
        self.Button2.place(relx=0.787, rely=0.564, height=34, width=77
                , bordermode='ignore')
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Search''')
        self.Button2.configure(width=77)
        self.Button2.configure(command=self.button2_clicked)

        self.Scrolledtext1 = ScrolledText(self.Labelframe2)
        self.Scrolledtext1.place(relx=0.064, rely=0.684, relheight=0.241
                , relwidth=0.662, bordermode='ignore')
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(foreground="black")
        self.Scrolledtext1.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext1.configure(highlightcolor="black")
        self.Scrolledtext1.configure(insertbackground="black")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(selectforeground="black")
        self.Scrolledtext1.configure(width=10)
        self.Scrolledtext1.configure(wrap="none")
        
    def button1_clicked(self):
        dirpath=filedialog.askdirectory()
        correct=True
        print(dirpath)
        try:
            summary(dirpath)
        except ValueError:
            mbox.showerror('Error','Directory is empty. Add some image files to classify')
            correct=False
        if correct == True:
            mbox.showinfo('Info','Images loaded and classified successfully')
        
    def button2_clicked(self):
        if self.Entry1.get() in deduction('Knowledge_Base.pl'):
            try:
                search=self.Entry1.get()
                filename=foundname(search)
                self.img=ImageTk.PhotoImage(Image.open(filename).resize((400,400)))
                self.Canvas1.create_image(32,32,anchor='nw',image=self.img)
                self.Scrolledtext2.delete(1.0,tk.END)
                definition=synset(search)
                self.Scrolledtext2.insert(tk.INSERT,definition[0].definition())
            except FileNotFoundError:
                
                if search in deduction('Knowledge_Base.pl'):
                    self.Scrolledtext2.delete(1.0,tk.END)
                    definition=synset(search)
                    self.Scrolledtext2.insert(tk.INSERT,definition[0].definition())
                else:
                    mbox.showerror('Error','File not found')
                    traceback.print_exc()
            except ValueError:
                mbox.showerror('Error','Invalid value')
                traceback.print_exc()
        
        else:
            word=self.Entry1.get()
            sugg=autocomplete(word,'Knowledge_Base.pl')
            
            if not sugg:
                self.Scrolledtext1.delete(1.0,tk.END)
                self.Scrolledtext1.insert(tk.INSERT,'Nessun suggerimento disponibile')
            else:
                self.Scrolledtext1.delete(1.0,tk.END)
                self.Scrolledtext1.insert(tk.INSERT,'Forse stavi cercando: \n')
                self.Scrolledtext1.insert(tk.INSERT,sugg)
                
            
            
            


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





